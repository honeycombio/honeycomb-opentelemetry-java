plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id "maven-publish"
}

apply from: "$rootDir/gradle/shadow.gradle"

def artifactName = "honeycomb-opentelemetry-javaagent"
description = 'Honeycomb distribution of the OpenTelemetry auto-instrumentation agent.'
def relocatePackages = ext.relocatePackages

configurations {
    customShadow
}

dependencies {
    customShadow project(path: ":custom", configuration: "shadow")
    implementation "io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}"
    implementation project(":common")
}

CopySpec isolateSpec() {
    return copySpec {
        configurations.customShadow.files.each {
            from(zipTree(it)) {
                into("inst")
                rename("(^.*)\\.class\$", "\$1.classdata")
            }
        }
    }
}


tasks {
    shadowJar {
        archivesBaseName = "${artifactName}"
        archiveClassifier.set("")
        archiveVersion.set(project.version)

        dependsOn ':custom:shadowJar'
        with isolateSpec()

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        mergeServiceFiles {
            include("inst/META-INF/services/*")
        }
        exclude("**/module-info.class")

        relocatePackages(it)

        manifest {
            attributes.put("Main-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
            attributes.put("Agent-Class", "io.honeycomb.opentelemetry.HoneycombAgent")
            attributes.put("Premain-Class", "io.honeycomb.opentelemetry.HoneycombAgent")
            attributes.put("Can-Redefine-Classes", "true")
            attributes.put("Can-Retransform-Classes", "true")
            attributes.put("Implementation-Vendor", "Honeycomb")
            attributes.put("Implementation-Version", "honeycomb-${project.version}-otel-${versions.opentelemetryJavaagent}")
        }
    }

    assemble {
        dependsOn(shadowJar)
    }
}
